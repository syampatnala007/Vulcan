import React, { useState } from 'react';

const ConfigFilesDisplay = () => {
  const [selectedFolder, setSelectedFolder] = useState(null);
  const [configFiles, setConfigFiles] = useState([]);

  const handleFilePickerClick = async () => {
    try {
      const directoryHandle = await window.showDirectoryPicker();
      setSelectedFolder(directoryHandle);

      // Read files from the "config" subfolder
      const configFilesList = await readConfigFiles(directoryHandle);
      setConfigFiles(configFilesList);
    } catch (error) {
      console.error('Error accessing the selected directory:', error);
    }
  };

  const readConfigFiles = async (directoryHandle) => {
    try {
      const configFilesList = [];
      await traverseDirectory(directoryHandle, configFilesList);
      return configFilesList;
    } catch (error) {
      console.error('Error reading config files:', error);
      return [];
    }
  };

  const traverseDirectory = async (directoryHandle, configFilesList) => {
    for await (const entry of directoryHandle.values()) {
      if (entry.kind === 'file') {
        // Check if the file is inside the "config" subfolder
        if (entry.name === 'config') {
          const configSubfolderHandle = await entry.getDirectoryHandle();
          await readConfigFilesFromSubfolder(configSubfolderHandle, configFilesList);
        }
      } else if (entry.kind === 'directory') {
        // Recursively traverse subdirectories
        await traverseDirectory(entry, configFilesList);
      }
    }
  };

  const readConfigFilesFromSubfolder = async (configSubfolderHandle, configFilesList) => {
    for await (const entry of configSubfolderHandle.values()) {
      if (entry.kind === 'file') {
        const file = await entry.getFile();
        const fileContents = await readFileContents(file);
        configFilesList.push({ name: file.name, contents: fileContents });
      }
    }
  };

  const readFileContents = async (file) => {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        resolve(reader.result);
      };
      reader.onerror = () => {
        reject(reader.error);
      };
      reader.readAsText(file);
    });
  };

  return (
    <div>
      <button onClick={handleFilePickerClick}>Select Folder</button>
      {selectedFolder && (
        <div>
          <p>Selected Folder: {selectedFolder.name}</p>
          {configFiles.length > 0 ? (
            <div>
              <h3>Config Files:</h3>
              <ul>
                {configFiles.map((file, index) => (
                  <li key={index}>
                    <strong>{file.name}</strong>
                    <pre>{file.contents}</pre>
                  </li>
                ))}
              </ul>
            </div>
          ) : (
            <p>No config files found in the "config" subfolder.</p>
          )}
        </div>
      )}
    </div>
  );
};

export default ConfigFilesDisplay;
