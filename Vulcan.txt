import React, { useState } from 'react';

const ConfigFilesDisplay = () => {
  const [selectedFolder, setSelectedFolder] = useState(null);
  const [configContents, setConfigContents] = useState([]);

  const handleFilePickerClick = async () => {
    try {
      const directoryHandle = await window.showDirectoryPicker();
      setSelectedFolder(directoryHandle);

      // Read the contents of the "config" subfolder
      const configContentsList = await readConfigContents(directoryHandle);
      setConfigContents(configContentsList);
    } catch (error) {
      console.error('Error accessing the selected directory:', error);
    }
  };

  const readConfigContents = async (directoryHandle) => {
    try {
      const configContentsList = [];
      await traverseDirectory(directoryHandle, configContentsList);
      return configContentsList;
    } catch (error) {
      console.error('Error reading config contents:', error);
      return [];
    }
  };

  const traverseDirectory = async (directoryHandle, configContentsList) => {
    for await (const entry of directoryHandle.values()) {
      if (entry.kind === 'file') {
        // Do nothing for files in the parent folder
      } else if (entry.kind === 'directory') {
        // Check if the directory is the "config" subfolder
        if (entry.name === 'config') {
          const configSubfolderHandle = await entry.getDirectoryHandle();
          await readConfigContentsFromSubfolder(configSubfolderHandle, configContentsList);
        } else {
          // Recursively traverse subdirectories
          await traverseDirectory(entry, configContentsList);
        }
      }
    }
  };

  const readConfigContentsFromSubfolder = async (configSubfolderHandle, configContentsList) => {
    for await (const entry of configSubfolderHandle.values()) {
      if (entry.kind === 'file') {
        const file = await entry.getFile();
        configContentsList.push({ type: 'file', name: file.name });
      } else if (entry.kind === 'directory') {
        configContentsList.push({ type: 'folder', name: entry.name });
      }
    }
  };

  return (
    <div>
      <button onClick={handleFilePickerClick}>Select Folder</button>
      {selectedFolder && (
        <div>
          <p>Selected Folder: {selectedFolder.name}</p>
          {configContents.length > 0 ? (
            <div>
              <h3>Contents of "config" Subfolder:</h3>
              <ul>
                {configContents.map((content, index) => (
                  <li key={index}>
                    {content.type === 'file' ? (
                      <strong>File: {content.name}</strong>
                    ) : (
                      <strong>Folder: {content.name}</strong>
                    )}
                  </li>
                ))}
              </ul>
            </div>
          ) : (
            <p>No contents found in the "config" subfolder.</p>
          )}
        </div>
      )}
    </div>
  );
};

export default ConfigFilesDisplay;
