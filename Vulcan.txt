import React, { useState } from 'react';

const FolderTree = ({ folders }) => {
  const [expandedFolders, setExpandedFolders] = useState([]);

  const handleFolderClick = (folderName) => {
    if (expandedFolders.includes(folderName)) {
      setExpandedFolders(expandedFolders.filter((folder) => folder !== folderName));
    } else {
      setExpandedFolders([...expandedFolders, folderName]);
    }
  };

  const handleFileClick = (filePath) => {
    // Show the global path of the file in an alert
    alert('Global path: ' + filePath);
  };

  const renderFolder = (folder) => {
    const isExpanded = expandedFolders.includes(folder.name);

    return (
      <div key={folder.name}>
        <button onClick={() => handleFolderClick(folder.name)}>
          {isExpanded ? '▼' : '▶'} {folder.name}
        </button>
        {isExpanded && (
          <div style={{ marginLeft: '20px' }}>
            {folder.contents.map((item, index) =>
              item.type === 'file' ? (
                <div key={index} onClick={() => handleFileClick(item.path)}>File: {item.name}</div>
              ) : (
                <div key={index}>
                  {renderFolder(item)}
                </div>
              )
            )}
          </div>
        )}
      </div>
    );
  };

  return (
    <div>
      {folders.map((folder, index) => renderFolder(folder, index))}
    </div>
  );
};

const ConfigFilesDisplay = () => {
  const [selectedDirectory, setSelectedDirectory] = useState(null);
  const [configContents, setConfigContents] = useState(null);

  const handleFilePickerClick = async () => {
    try {
      const directoryHandle = await window.showDirectoryPicker();
      setSelectedDirectory(directoryHandle);

      // Read the contents of the "config" subfolder
      const configContentsList = await readConfigContents(directoryHandle);
      setConfigContents(configContentsList);
    } catch (error) {
      console.error('Error accessing the selected directory:', error);
    }
  };

  const readConfigContents = async (directoryHandle) => {
    try {
      const configContentsList = [];
      const configDirectoryHandle = await directoryHandle.getDirectoryHandle('config');
      await traverseConfigDirectory(configDirectoryHandle, configContentsList);
      return configContentsList;
    } catch (error) {
      console.error('Error reading config contents:', error);
      return [];
    }
  };

  const traverseConfigDirectory = async (configDirectoryHandle, configContentsList) => {
    for await (const entry of configDirectoryHandle.values()) {
      if (entry.kind === 'file') {
        const file = await entry.getFile();
        configContentsList.push({ type: 'file', name: file.name, path: file.path });
      } else if (entry.kind === 'directory') {
        const subfolderContents = [];
        await traverseConfigDirectory(entry, subfolderContents);
        configContentsList.push({ type: 'folder', name: entry.name, contents: subfolderContents });
      }
    }
  };

  return (
    <div>
      <button onClick={handleFilePickerClick}>Select Directory</button>
      {selectedDirectory && (
        <div>
          <p>Selected Directory: {selectedDirectory.name}/config</p>
          {configContents !== null && configContents.length > 0 ? (
            <div>
              <h3>Contents of "config" Subfolder:</h3>
              <FolderTree folders={configContents} />
            </div>
          ) : (
            <p>No contents found in the "config" subfolder.</p>
          )}
        </div>
      )}
    </div>
  );
};

export default ConfigFilesDisplay;
