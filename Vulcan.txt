import React, { useState } from 'react';
import { promisify } from 'util';
import { Repository } from 'nodegit';

const GitRemoteLinkDisplay = () => {
  const [selectedFolder, setSelectedFolder] = useState(null);
  const [gitRemoteLink, setGitRemoteLink] = useState('');

  const handleFilePickerClick = async () => {
    try {
      const directoryHandle = await window.showDirectoryPicker();
      setSelectedFolder(directoryHandle);
      getGitRemoteLink(directoryHandle);
    } catch (error) {
      console.error('Error accessing the selected directory:', error);
    }
  };

  const getGitRemoteLink = async (directoryHandle) => {
    try {
      // Convert the directory handle to a Node.js-compatible FileSystemDirectoryHandle
      const nodejsDirectoryHandle = await directoryHandle.queryPermission({ mode: 'readwrite' });
      const nodejsDirectory = await nodejsDirectoryHandle.get();
      const directoryPath = nodejsDirectory.path;

      // Open the Git repository in the selected directory
      const repository = await Repository.open(directoryPath);

      // Get the remote URL of the repository
      const remote = await repository.getRemote('origin');
      const remoteUrl = remote.url();

      // Set the Git remote link in the state
      setGitRemoteLink(remoteUrl);
    } catch (error) {
      console.error('Error getting Git remote link:', error);
    }
  };

  return (
    <div>
      <button onClick={handleFilePickerClick}>Select Directory</button>
      <div>
        {selectedFolder && (
          <p>
            Selected Folder: {selectedFolder.name}
          </p>
        )}
        {gitRemoteLink && (
          <p>
            Git Remote Link: {gitRemoteLink}
          </p>
        )}
      </div>
    </div>
  );
};

export default GitRemoteLinkDisplay;
