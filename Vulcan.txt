import React, { useState } from 'react';

const GitRemoteLinkDisplay = () => {
  const [selectedFolder, setSelectedFolder] = useState(null);
  const [gitRemoteLink, setGitRemoteLink] = useState('');

  const handleFilePickerClick = async () => {
    try {
      const directoryHandle = await window.showDirectoryPicker();
      setSelectedFolder(directoryHandle);

      // Get the path of the selected directory
      const directoryPath = await getDirectoryPath(directoryHandle);

      // Fetch the Git remote link from the server-side API
      const remoteLink = await fetchGitRemoteLink(directoryPath);
      setGitRemoteLink(remoteLink);
    } catch (error) {
      console.error('Error accessing the selected directory:', error);
    }
  };

  const getDirectoryPath = async (directoryHandle) => {
    // Convert the directory handle to a Node.js-compatible FileSystemDirectoryHandle
    const nodejsDirectoryHandle = await directoryHandle.queryPermission({ mode: 'readwrite' });
    const nodejsDirectory = await nodejsDirectoryHandle.get();
    return nodejsDirectory.path;
  };

  const fetchGitRemoteLink = async (directoryPath) => {
    try {
      // Make a request to your server-side API to fetch the Git remote link
      const response = await fetch(`/api/getGitRemoteLink?directory=${encodeURIComponent(directoryPath)}`);
      if (!response.ok) {
        throw new Error('Failed to fetch Git remote link.');
      }
      const data = await response.json();
      return data.remoteLink;
    } catch (error) {
      console.error('Error fetching Git remote link:', error);
      return '';
    }
  };

  return (
    <div>
      <button onClick={handleFilePickerClick}>Select Directory</button>
      <div>
        {selectedFolder && (
          <p>
            Selected Folder: {selectedFolder.name}
          </p>
        )}
        {gitRemoteLink && (
          <p>
            Git Remote Link: {gitRemoteLink}
          </p>
        )}
      </div>
    </div>
  );
};

export default GitRemoteLinkDisplay;
