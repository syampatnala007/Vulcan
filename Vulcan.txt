import React, { useState } from 'react';

const FileExplorer = () => {
  const [fileList, setFileList] = useState([]);
  const [currentFolderPath, setCurrentFolderPath] = useState('');

  const handleFilePickerClick = async () => {
    try {
      const directoryHandle = await window.showDirectoryPicker();
      const filesWithDetails = await buildFileTree(directoryHandle);
      setFileList(filesWithDetails);
      setCurrentFolderPath(directoryHandle.name); // Set the current folder path to the root directory name
    } catch (error) {
      console.error('Error accessing the selected directory:', error);
    }
  };

  const buildFileTree = async (directory, path = '') => {
    const files = [];
    for await (const [name, handle] of directory.entries()) {
      const filePath = `${path}/${name}`;
      if (handle.kind === 'file') {
        files.push({
          name,
          isFile: true,
          path: filePath,
          handle, // Store the file handle for accessing global path
        });
      } else if (handle.kind === 'directory') {
        files.push({
          name,
          isFile: false,
          isExpanded: false,
          path: filePath,
          content: await buildFileTree(handle, filePath),
        });
      }
    }
    return files;
  };

  const toggleFolderVisibility = (folder, fileList) => {
    const updateFolder = (files) =>
      files.map((file) => {
        if (!file.isFile && file.path === folder.path) {
          return { ...file, isExpanded: !file.isExpanded };
        } else if (!file.isFile && folder.path.startsWith(file.path)) {
          return { ...file, isExpanded: true, content: updateFolder(file.content) };
        } else {
          return file;
        }
      });

    return updateFolder(fileList);
  };

  const handleFolderClick = (folder) => {
    setCurrentFolderPath(folder.path); // Set the current folder path to the clicked folder path
    setFileList((prevFileList) => toggleFolderVisibility(folder, prevFileList));
  };

  const handleFileClick = async (file) => {
    try {
      if (file.isFile && file.handle) {
        const fileHandle = await file.handle.getFile();
        alert(`Global File Path: ${fileHandle.webkitRelativePath}`);
      }
    } catch (error) {
      console.error('Error accessing the selected file:', error);
    }
  };

  const renderFileTree = (fileList) => {
    return (
      <ul>
        {fileList.map((file, index) => (
          <li key={index}>
            {file.isFile ? (
              <span onClick={() => handleFileClick(file)}>{file.name}</span>
            ) : (
              <span onClick={() => handleFolderClick(file)}>
                <strong>{file.name}</strong>
                {file.isExpanded && renderFileTree(file.content)} {/* Render subfolders if expanded */}
              </span>
            )}
          </li>
        ))}
      </ul>
    );
  };

  return (
    <div>
      <button onClick={handleFilePickerClick}>Select Directory</button>
      <div>
        <h2>Files and folders in the selected directory:</h2>
        {fileList.length > 0 ? renderFileTree(fileList) : <p>No directory selected</p>}
      </div>
    </div>
  );
};

export default FileExplorer;
