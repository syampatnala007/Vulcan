import React, { useState } from 'react';

const FileDropdown = ({ files, onFileSelected }) => {
  return (
    <select onChange={(e) => onFileSelected(e.target.value)}>
      <option value="">Select a file</option>
      {files.map((file, index) => (
        <option key={index} value={file.path}>
          {file.name}
        </option>
      ))}
    </select>
  );
};

const ConfigFilesDisplay = () => {
  const [selectedDirectory, setSelectedDirectory] = useState(null);
  const [configFiles, setConfigFiles] = useState([]);

  const handleFilePickerClick = async () => {
    try {
      const directoryHandle = await window.showDirectoryPicker();
      setSelectedDirectory(directoryHandle);

      // Read the contents of the "config" subfolder
      const configFilesList = await readConfigFiles(directoryHandle);
      setConfigFiles(configFilesList);
    } catch (error) {
      console.error('Error accessing the selected directory:', error);
    }
  };

  const readConfigFiles = async (directoryHandle) => {
    try {
      const configFilesList = [];
      const configDirectoryHandle = await directoryHandle.getDirectoryHandle('config');
      await traverseConfigDirectory(configDirectoryHandle, configFilesList, 'config');
      return configFilesList;
    } catch (error) {
      console.error('Error reading config files:', error);
      return [];
    }
  };

  const traverseConfigDirectory = async (configDirectoryHandle, configFilesList, parentPath) => {
    for await (const entry of configDirectoryHandle.values()) {
      if (entry.kind === 'file') {
        const file = await entry.getFile();
        configFilesList.push({ name: file.name, path: `${parentPath}/${file.name}` });
      } else if (entry.kind === 'directory') {
        await traverseConfigDirectory(entry, configFilesList, `${parentPath}/${entry.name}`);
      }
    }
  };

  const handleFileSelected = (filePath) => {
    // Show the global path of the selected file in an alert
    alert('Global path: ' + filePath);
  };

  return (
    <div>
      <button onClick={handleFilePickerClick}>Select Directory</button>
      {selectedDirectory && (
        <div>
          <p>Selected Directory: {selectedDirectory.name}/config</p>
          {configFiles.length > 0 ? (
            <div>
              <h3>Files in "config" Subfolder:</h3>
              <FileDropdown files={configFiles} onFileSelected={handleFileSelected} />
            </div>
          ) : (
            <p>No files found in the "config" subfolder.</p>
          )}
        </div>
      )}
    </div>
  );
};

export default ConfigFilesDisplay;
